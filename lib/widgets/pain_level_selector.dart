// lib/widgets/pain_level_selector.dart
import 'package:flutter/material.dart';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
String getEmotionalIcon(int level) {
  if (level == 0) {
    return 'üòÅ'; // 0: No pain / ‡πÑ‡∏°‡πà‡∏õ‡∏ß‡∏î‡πÄ‡∏•‡∏¢
  } else if (level <= 2) {
    return 'üòä'; // 1-2: Minimal pain / ‡∏õ‡∏ß‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å
  } else if (level <= 4) {
    return 'üòê'; // 3-4: Mild pain / ‡∏õ‡∏ß‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (Moderate pain ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 5)
  } else if (level <= 6) {
    return 'üòî'; // 5-6: Moderate pain / ‡∏õ‡∏ß‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Sad face)
  } else if (level <= 8) {
    return 'üòü'; // 7-8: Severe pain / ‡∏õ‡∏ß‡∏î‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (Very sad/Worried face)
  } else {
    return 'üò≠'; // 9-10: Worst possible pain / ‡∏õ‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Crying face)
  }
}

class PainLevelSelector extends StatefulWidget {
  // Callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
  final Function(int level, String icon) onLevelSelected;
  final int initialLevel;

  const PainLevelSelector({
    super.key,
    required this.onLevelSelected,
    this.initialLevel = 0,
  });

  @override
  State<PainLevelSelector> createState() => _PainLevelSelectorState();
}

class _PainLevelSelectorState extends State<PainLevelSelector> {
  late int _currentLevel;

  @override
  void initState() {
    super.initState();
    _currentLevel = widget.initialLevel;
    
    // *** ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ ***
    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å widget.onLevelSelected() ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô initState ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î setState() during build
    // ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ addPostFrameCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    WidgetsBinding.instance.addPostFrameCallback((_) {
      widget.onLevelSelected(_currentLevel, getEmotionalIcon(_currentLevel));
    });
  }

  void _selectLevel(int level) {
    setState(() {
      _currentLevel = level;
    });
    // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
    widget.onLevelSelected(level, getEmotionalIcon(level));
  }

  @override
  Widget build(BuildContext context) {
    // ‡πÉ‡∏ä‡πâ Slider ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ 0 ‡∏ñ‡∏∂‡∏á 10
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
         // ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
        Center(
          child: Text(
            getEmotionalIcon(_currentLevel),
            style: const TextStyle(fontSize: 40),
          ),
        ),
        Slider(
          value: _currentLevel.toDouble(),
          min: 0,
          max: 10,
          divisions: 5,
          label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö ${_currentLevel}',
          onChanged: (double value) {
            _selectLevel(value.round());
          },
        ),
        Center(
           child: Text(
            '‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${_currentLevel} (${getEmotionalIcon(_currentLevel)})',
            style: const TextStyle(fontSize: 17, color: Color.fromARGB(255, 51, 49, 49)),
          ),
        ),
      ],
    );
  }
}