// lib/providers/symptom_provider.dart

import 'package:flutter/foundation.dart';
import '../‡πâhelpers/database_helper.dart';// ‡πÉ‡∏ä‡πâ DatabaseHelper
import '../models/symptom.dart';// ‡πÉ‡∏ä‡πâ Symptom Model
       

class SymptomProvider with ChangeNotifier {
  // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á Database Helper
  final DatabaseHelper _dbHelper = DatabaseHelper.instance;

  // State ‡∏´‡∏•‡∏±‡∏Å: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Symptom ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  List<Symptom> _symptoms = [];
  
  // Getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ UI ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  List<Symptom> get symptoms => [..._symptoms];

  // 1. Load Data: ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å DB
  Future<void> loadSymptoms() async {
    print('SymptomProvider: Loading symptoms...');
    try {
      _symptoms = await _dbHelper.getAllSymptoms();
      notifyListeners(); // ‡πÅ‡∏à‡πâ‡∏á UI ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
      print('SymptomProvider: Symptoms loaded (${_symptoms.length} items)');
    } catch (e) {
      print('Error loading symptoms: $e');
    }
  }

  // 2. Add Data: ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Symptom ‡πÉ‡∏´‡∏°‡πà
  Future<void> addSymptom({
    required String diseaseName,
    required String symptoms,
    required String cause,
    required String treatment,
    int painLevel = 0,
    String emotionalIcon = 'üôÇ',
  }) async {
    final newSymptom = Symptom(
      diseaseName: diseaseName,
      symptoms: symptoms,
      cause: cause,
      treatment: treatment,
      painLevel: painLevel,
      emotionalIcon: emotionalIcon,
    );

    // 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    int id = await _dbHelper.insertSymptom(newSymptom);

    // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    final symptomWithId = newSymptom.copyWith(id: id);
    _symptoms.insert(0, symptomWithId); 
    
    notifyListeners(); // 3. ‡πÅ‡∏à‡πâ‡∏á UI
    print('Symptom added with id $id');
  }

  // 3. Update Data: ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Add/Edit Screen)
  Future<void> updateSymptom(Symptom updatedSymptom) async {
    if (updatedSymptom.id == null) return;
    
    // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    int rowsAffected = await _dbHelper.updateSymptom(updatedSymptom);

    if (rowsAffected > 0) {
      // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
      final index = _symptoms.indexWhere((s) => s.id == updatedSymptom.id);
      if (index >= 0) {
        _symptoms[index] = updatedSymptom;
        notifyListeners(); // 3. ‡πÅ‡∏à‡πâ‡∏á UI
        print('Symptom id ${updatedSymptom.id} updated.');
      }
    }
  }

  // 4. Delete Data: ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö
  Future<void> deleteSymptom(int id) async {
    // 1. ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    int rowsDeleted = await _dbHelper.deleteSymptom(id);

    if (rowsDeleted > 0) {
      // 2. ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å State ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
      _symptoms.removeWhere((symptom) => symptom.id == id);
      
      notifyListeners(); // 3. ‡πÅ‡∏à‡πâ‡∏á UI
      print('Symptom id $id deleted.');
    }
  }
}